// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SUPPLIER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String?
  expires      DateTime?
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageViews    PageView[]
  events       Event[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  // Enterprise-specific fields
  role          UserRole  @default(BUYER)
  phone         String?   @unique
  phoneVerified DateTime?
  companyId     String?
  company       Company?  @relation(fields: [companyId], references: [id])
  
  // Analytics relations
  pageViews     PageView[]
  events        Event[]
  
  // Business relations
  rfqs          RFQ[]
  quotes        Quote[]
  buyerTransactions Transaction[] @relation("BuyerTransactions")
  supplierTransactions Transaction[] @relation("SupplierTransactions")
  notifications Notification[]
  preferences   UserPreferences?
  mfaSetup      MFASetup?
  devices       Device[]
  riskScores    SupplierRiskScore[]
  suspiciousTransactions SuspiciousTransaction[]
}

model Company {
    id String @id @default(cuid())
    name String
    industry String?
    companySize String? // e.g., "startup", "SME", "enterprise"
    gstNumber String? @unique
    address String?
    users User[]
    products Product[]
    rfqs RFQ[]
    quotes Quote[]
    documents Document[]
    verifications CompanyVerification[]
    riskScores SupplierRiskScore[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  unit        String
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  rfqs        RFQ[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
}

model RFQ {
  id             String      @id @default(cuid())
  title          String
  description    String
  categoryId     String
  category       Category    @relation(fields: [categoryId], references: [id])
  quantity       Int
  unit           String
  budget         Float?
  currency       String      @default("USD")
  deadline       DateTime?
  status         RFQStatus   @default(OPEN)
  buyer          User        @relation(fields: [buyerId], references: [id])
  buyerId        String
  company        Company     @relation(fields: [companyId], references: [id])
  companyId      String
  quotes         Quote[]
  documents      Document[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tags           Json?
  location       String?
  specifications Json?
  products       Product[]
}

model Quote {
  id            String    @id @default(cuid())
  price         Float
  currency      String    @default("USD")
  deliveryTime  Int       // in days
  validity      Int       // in days
  status        QuoteStatus @default(PENDING)
  description   String?
  rfq           RFQ       @relation(fields: [rfqId], references: [id])
  rfqId         String
  supplier      User      @relation(fields: [supplierId], references: [id])
  supplierId    String
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String
  documents     Document[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id            String    @id @default(cuid())
  amount        Float
  currency      String    @default("USD")
  status        TransactionStatus @default(PENDING)
  type          TransactionType
  quote         Quote     @relation(fields: [quoteId], references: [id])
  quoteId       String
  buyer         User      @relation("BuyerTransactions", fields: [buyerId], references: [id])
  buyerId       String
  supplier      User      @relation("SupplierTransactions", fields: [supplierId], references: [id])
  supplierId    String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  escrowId      String?
  paymentMethod String?
  metadata      Json?
}

model Document {
  id          String   @id @default(cuid())
  name        String
  type        String
  url         String
  size        Int
  mimeType    String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  rfq         RFQ?     @relation(fields: [rfqId], references: [id])
  rfqId       String?
  quote       Quote?   @relation(fields: [quoteId], references: [id])
  quoteId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  metadata  Json?
}

model UserPreferences {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String   @unique
  language      String   @default("en")
  theme         String   @default("light")
  notifications Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CompanyVerification {
  id          String             @id @default(cuid())
  company     Company            @relation(fields: [companyId], references: [id])
  companyId   String             @unique
  status      VerificationStatus @default(PENDING)
  documents   Json?
  notes       String?
  verifiedBy  String?
  verifiedAt  DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model SupplierRiskScore {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @unique
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?  @unique
  score       Float
  factors     Json
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model SuspiciousTransaction {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  type      String
  currency  String
  patterns  Json?
  metadata  Json?
  status    String   @default("flagged")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model MFASetup {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  secret      String
  backupCodes Json?
  isEnabled   Boolean   @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Device {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  userAgent   String
  ipAddress   String
  isVerified  Boolean  @default(false)
  riskScore   Float    @default(0.5)
  lastActive  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([lastActive])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  isEnabled   Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rfqs        RFQ[]
}

enum CompanyType {
  BUYER
  SUPPLIER
  BOTH
}

enum RFQStatus {
  OPEN
  CLOSED
  CANCELLED
  AWARDED
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  DISPUTED
}

enum TransactionType {
  ESCROW
  DIRECT
}

enum NotificationType {
  RFQ
  QUOTE
  TRANSACTION
  SYSTEM
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentGateway {
  STRIPE
  RAZORPAY
  PAYPAL
  BANK_TRANSFER
}

// Analytics Models
model PageView {
  id        String   @id @default(cuid())
  page      String
  userId    String?
  sessionId String?
  timestamp DateTime @default(now())
  metadata  Json?
  
  session Session? @relation(fields: [sessionId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
}

model Event {
  id        String   @id @default(cuid())
  event     String
  page      String
  userId    String?
  sessionId String?
  timestamp DateTime @default(now())
  metadata  Json?
  
  session Session? @relation(fields: [sessionId], references: [id])
  user    User?    @relation(fields: [userId], references: [id])
}
